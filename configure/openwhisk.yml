---
kind: Namespace
apiVersion: v1
metadata:
  name: openwhisk
  labels:
    name: openwhisk
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openwhisk-config
  namespace: openwhisk
data:
  env: |
    WHISK_API_HOST_NAME=nginx.openwhisk
    WHISK_VERSION_NAME=kube
    WHISK_LOGS_DIR=/tmp/wsklogs
    WHISK_VERSION_DATE=2017-05-25T01:36:40Z
    WHISK_VERSION_BUILDNO=latest
  
    RUNTIMES_MANIFEST='{"defaultImagePrefix": "openwhisk", "defaultImageTag": "latest", "blackboxes": [{"name": "dockerskeleton"}], "runtimes": {"python": [{"kind": "python", "image": {"name": "python2action"}}, {"default": true, "kind": "python:2", "image": {"name": "python2action"}}, {"kind": "python:3", "image": {"name": "python3action"}}], "swift": [{"deprecated": true, "kind": "swift", "image": {"name": "swiftaction"}}, {"default": true, "kind": "swift:3", "image": {"name": "swift3action"}}], "java": [{"kind": "java", "default": true, "image": {"name": "java8action"}, "attached": {"attachmentType": "application/java-archive", "attachmentName": "jarfile"}, "sentinelledLogs": false, "requireMain": true}], "nodejs": [{"deprecated": true, "kind": "nodejs", "image": {"name": "nodejsaction"}}, {"default": true, "kind": "nodejs:6", "image": {"name": "nodejs6action"}}]}}'
    
    DEFAULTLIMITS_ACTIONS_INVOKES_PERMINUTE=120
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENT=100
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    DEFAULTLIMITS_ACTIONS_SEQUENCE_MAXLENGTH=50
    DEFAULTLIMITS_TRIGGERS_FIRES_PERMINUTE=60

    LIMITS_ACTIONS_INVOKES_PERMINUTE=60
    LIMITS_ACTIONS_INVOKES_CONCURRENT=30
    LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    LIMITS_TRIGGERS_FIRES_PERMINUTE=60

    CONTROLLER_HOST=controller-0.controller
    CONTROLLER_HOST_PORT=8080
    
    CONSULSERVER_HOST=consul.openwhisk
    CONSUL_HOST=consul.openwhisk
    CONSUL_HOST_PORT4=8500
    
    KAFKA_HOST=kafka.openwhisk
    KAFKA_HOST_PORT=9092
    KAFKA_NUMPARTITIONS=2

    ZOOKEEPER_HOST=zookeeper.openwhisk
    ZOOKEEPER_HOST_PORT=2181

    INVOKER_CONTAINER_NETWORK=bridge
    INVOKER_USEREACTIVEPOOL=true
    INVOKER_USEKUBERNETES=true
    INVOKER_NUMCORE=4
    INVOKER_CORESHARE=3
    
    NGINX_HOST=nginx.openwhisk
    NGINX_CONF_DIR=/tmp/nginx

    DB_HOST=couchdb.openwhisk
    DB_PROVIDER=CouchDB
    DB_PORT=5984
    DB_PROTOCOL=http
    DB_USERNAME=couch_user
    DB_PASSWORD=couch_password
    DB_AUTH="subjects"
    DB_PREFIX="openwhisk_kube_"
    DB_SPLIT_ACTIONS_AND_ACTIVATIONS=true
    DB_WHISK_ACTIONS=openwhisk_kube_whisks
    DB_WHISK_ACTIVATIONS=openwhisk_kube_activations
    DB_WHISK_AUTHS=openwhisk_kube_subjects

    APIGW_AUTH_USER=""
    APIGW_AUTH_PWD=""
    APIGW_HOST="nginx.openwhisk"
    APIGW_HOST_V2="nginx.openwhisk"

    DOCKER_DNS=""
    DOCKER_REGISTRY=""
    DOCKER_IMAGE_PREFIX="openwhisk"

    LOADBALANCER_ACTIVATIONCOUNTBEFORENEXTINVOKER=10

    AUTH_WHISK_SYSTEM=789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP
    AUTH_GUEST=23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP

    CATALOG_NAMESPACE="/whisk.system"
    CATALOG_AUTH_KEY="/openwhisk/ansible/files/auth.whisk.system"
    CATALOG_REPOS='{"openwhisk-catalog": {"url": "https://github.com/apache/incubator-openwhisk-catalog.git", "location": "/openwhisk-catalog", "version": "HEAD", "repo_update": "NO"}}'
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchdb
  namespace: openwhisk
  labels:
    name: couchdb
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: couchdb
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: couchdb-data
        emptyDir: {}
      containers:
      - name: couchdb
        imagePullPolicy: IfNotPresent
        image: projectodd/whisk_couchdb:openshift-latest
        ports:
        - name: couchdb
          containerPort: 5984
        volumeMounts:
          - name: openwhisk-config
            mountPath: "/openwhisk_config"
          - name: couchdb-data
            mountPath: "/usr/local/var/lib/couchdb"
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: openwhisk
  labels:
    name: couchdb
spec:
  selector:
    name: couchdb
  ports:
    - port: 5984
      targetPort: 5984
      name: couchdb
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: zookeeper
  namespace: openwhisk
  labels:
    name: zookeeper
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: zookeeper
    spec:
      restartPolicy: Always
      volumes:
      - name: zookeeper-data
        emptyDir: {}
      - name: zookeeper-datalog
        emptyDir: {}
      containers:
      - name: zookeeper
        image: projectodd/whisk_zookeeper:openshift-latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: zookeeper
          containerPort: 2181
        - name: server
          containerPort: 2888
        - name: leader-election
          containerPort: 3888
        volumeMounts:
          - mountPath: /data
            name: zookeeper-data
          - mountPath: /datalog
            name: zookeeper-datalog
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: openwhisk
  labels:
    name: zookeeper
spec:
  selector:
    name: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
      name: zookeeper
    - port: 2888
      targetPort: 2888
      name: server
    - port: 3888
      targetPort: 3888
      name: leader-election
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka
  namespace: openwhisk
  labels:
    name: kafka
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kafka
    spec:
      restartPolicy: Always

      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: projectodd/whisk_kafka:openshift-latest
        ports:
        - name: kafka
          containerPort: 9092
        env:
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: kafka.openwhisk
        - name: "KAFKA_PORT"
          value: "9092"

        # message settings
        - name: "REPLICATION_FACTOR"
          value: "1"
        - name: "PARTITIONS"
          value: "1"

        # health topic settings
        - name: "KAFKA_TOPICS_HEALTH_RETENTIONBYTES"
          value: "536870912"
        - name: "KAFKA_TOPICS_HEALTH_RETENTIONMS"
          value: "1073741824"
        - name: "KAFKA_TOPICS_HEALTH_SEGMENTBYTES"
          value: "3600000"

        # complete topic settings
        - name: "CONTROLLER_COUNT"
          value: "2"
        - name: "KAFKA_TOPICS_COMPLETED_RETENTIONBYTES"
          value: "536870912"
        - name: "KAFKA_TOPICS_COMPLETED_RETENTIONMS"
          value: "1073741824"
        - name: "KAFKA_TOPICS_COMPLETED_SEGMENTBYTES"
          value: "3600000"

        # invoker topic settings
        - name: "INVOKER_COUNT"
          value: "1"
        - name: "KAFKA_TOPICS_INVOKER_RETENTIONBYTES"
          value: "536870912"
        - name: "KAFKA_TOPICS_INVOKER_RETENTIONMS"
          value: "1073741824"
        - name: "KAFKA_TOPICS_INVOKER_SEGMENTBYTES"
          value: "3600000"

        # zookeeper info
        - name: "ZOOKEEPER_HOST"
          value: "zookeeper.openwhisk"
        - name: "ZOOKEEPER_PORT"
          value: "2181"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: openwhisk
  labels:
    name: kafka
spec:
  selector:
    name: kafka
  ports:
    - port: 9092
      targetPort: 9092
      name: kafka
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: controller
  namespace: openwhisk
  labels:
    name: controller
spec:
  replicas: 2
  serviceName: "controller"
  template:
    metadata:
      labels:
        name: controller
    spec:
      restartPolicy: Always

      containers:
      - name: controller
        imagePullPolicy: IfNotPresent
        # Update this image to the publix OpenWhisk Image once this PR is merged.
        # https://github.com/apache/incubator-openwhisk/pull/2452
        image: projectodd/controller:openshift-latest
        command: ["/bin/bash", "-c", "/controller/bin/controller `hostname | cut -d'-' -f2`"]
        ports:
        - name: controller
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: "/ping"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
        env:
        - name: "PORT"
          value: "8080"
        - name: "COMPONENT_NAME"
          value: "controller"
        - name: "KAFKA_NUMPARTITIONS"
          value: "2"
        - name: "SERVICE_CHECK_HTTP"
          value: "/ping"
        - name: "SERVICE_CHECK_TIMEOUT"
          value: "2s"
        - name: "SERVICE_CHECK_INTERVAL"
          value: "15s"

        # Loadbalancer options
        - name: "LOADBALANCER_INVOKERBUSYTHRESHOLD"
          value: "16"

        # obsolete but "required" options
        - name: "CONSULSERVER_HOST"
          value: "consul.openwhisk"
        - name: "CONSUL_HOST_PORT4"
          value: "8500"

        # This needs to stay up to date with the lates runtime in Ansible Groupvars
        - name: "RUNTIMES_MANIFEST"
          value: '{ "defaultImagePrefix": "openwhisk", "defaultImageTag": "latest", "runtimes": { "nodejs": [ { "kind": "nodejs", "image": { "name": "nodejsaction" }, "deprecated": true }, { "kind": "nodejs:6", "default": true, "image": { "name": "nodejs6action" }, "deprecated": false } ], "python": [ { "kind": "python", "image": { "name": "python2action" }, "deprecated": false }, { "kind": "python:2", "default": true, "image": { "name": "python2action" }, "deprecated": false }, { "kind": "python:3", "image": { "name": "python3action" }, "deprecated": false } ], "swift": [ { "kind": "swift", "image": { "name": "swiftaction" }, "deprecated": true }, { "kind": "swift:3", "image": { "name": "swift3action" }, "deprecated": false }, { "kind": "swift:3.1.1", "default": true, "image": { "name": "action-swift-v3.1.1" }, "deprecated": false } ], "java": [ { "kind": "java", "default": true, "image": { "name": "java8action" }, "deprecated": false, "attached": { "attachmentName": "jarfile", "attachmentType": "application/java-archive" }, "sentinelledLogs": false, "requireMain": true } ] }, "blackboxes": [ { "name": "dockerskeleton" } ] }'

        # this version is the day it is deployed and should be configured every time
        - name:  "WHISK_VERSION_DATE"
          value: "2017-01-01T00:00:00Z"
        # the buildno should be the docker image tag to use
        - name: "WHISK_VERSION_BUILDNO"
          value: "latest"

        # Java options
        - name: "JAVA_OPTS"
          value: "-Xmx2g"

        # Kafka properties
        - name: "KAFKA_HOST"
          value: "kafka.openwhisk"
        - name: "KAFKA_HOST_PORT"
          value: "9092"

        # specific controller arguments
        - name: "CONTROLLER_OPTS"
          value: ""
        - name: "DEFAULTLIMITS_ACTIONS_INVOKES_PERMINUTE"
          value: "120"
        - name: "DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENT"
          value: "100"
        - name: "DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM"
          value: "500"
        - name: "DEFAULTLIMITS_ACTIONS_SEQUENCE_MAXLENGTH"
          value: "50"
        - name: "DEFAULTLIMITS_TRIGGERS_FIRES_PERMINUTE"
          value: "60"

        # properties for DB connection
        - name: "DB_USERNAME"
          value: "couch_user"
        - name: "DB_PASSWORD"
          value: "couch_password"
        - name: "DB_PORT"
          value: "5984"
        - name:  "DB_PROTOCOL"
          value: "http"
        - name: "DB_HOST"
          value: "couchdb.openwhisk"
        - name: "DB_PROVIDER"
          value: "CouchDB"
        - name: "DB_WHISK_ACTIVATIONS"
          value: "openwhisk_kube_activations"
        - name: "DB_WHISK_ACTIONS"
          value: "openwhisk_kube_whisks"
        - name: "DB_WHISK_AUTHS"
          value: "openwhisk_kube_subjects"
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: openwhisk
  labels:
    name: controller
spec:
  selector:
    name: controller
  clusterIP: None
  ports:
    - port: 8080
      targetPort: 8080
      name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invoker
  namespace: openwhisk
data:
  init: |
    source /openwhisk_config/env
    export ORDINAL=$(hostname | cut -d'-' -f2)
    echo "Waiting for controller to be available"
    until $(curl --output /dev/null --silent --head --fail http://${CONTROLLER_HOST}:${CONTROLLER_HOST_PORT}/ping); do printf '.'; sleep 1; done
    export COMPONENT_NAME=${ORDINAL}
    /invoker/bin/invoker ${ORDINAL}
  cleanup: |
    export ORDINAL=$(hostname | cut -d'-' -f2)
    kubectl delete pod -l invoker=invoker${ORDINAL}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: invoker
  namespace: openwhisk
  labels:
    name: invoker
spec:
  replicas: 1
  serviceName: "invoker"
  template:
    metadata:
      labels:
        name: invoker
    spec:
      restartPolicy: Always
      volumes:
      - name: cgroup
        hostPath:
          path: "/sys/fs/cgroup"
      - name: runc
        hostPath:
          path: "/run/runc"
      - name: dockerrootdir
        hostPath:
          path: "/var/lib/docker/containers"
      - name: dockersock
        hostPath:
          path: "/var/run/docker.sock"
      - name: apparmor
        hostPath:
          path: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: invoker-config
        configMap:
          name: invoker
      containers:
      - name: invoker
        imagePullPolicy: IfNotPresent
        image: projectodd/invoker:openshift-latest
        command: [ "/bin/bash", "-o", "allexport", "/invoker_config/init" ]
        env:
          - name: "PORT"
            value: "8080"
          - name: "SERVICE_CHECK_HTTP"
            value: "/ping"
          - name: "SERVICE_CHECK_TIMEOUT"
            value: "2s"
          - name: "SERVICE_CHECK_INTERVAL"
            value: "15s"
          - name: "DOCKER_API_VERSION"
            value: "1.23"

          # Invoker instance count. Needs to match replica count
          - name: "INVOKER_INSTANCES"
            value: "1"
            
        ports:
        - name: invoker
          containerPort: 8080
        volumeMounts:
        - name: cgroup
          mountPath: "/sys/fs/cgroup"
        - name: runc
          mountPath: "/run/runc"
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: dockerrootdir
          mountPath: "/containers"
        - name: apparmor
          mountPath: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: invoker-config
          mountPath: "/invoker_config"
        lifecycle:
          preStop:
            exec:
              command: [ "/bin/bash", "/invoker_config/cleanup" ]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
  namespace: openwhisk
  labels:
    name: nginx
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: nginx
    spec:
      restartPolicy: Always
      volumes:
      - name: nginx-certs
        secret:
          secretName: nginx
      - name: nginx-conf
        configMap:
          name: nginx
      - name: logs
        emptyDir: {}
      containers:
      - name: nginx
        imagePullPolicy: Always
        image: danlavine/whisk_nginx
        ports:
        - name: http
          containerPort: 80
        - name: http-api
          containerPort: 443
        - name: https-admin
          containerPort: 8443
        volumeMounts:
        - name: nginx-conf
          mountPath: "/etc/nginx/nginx.conf"
          subPath: "nginx.conf"
        - name: nginx-certs
          mountPath: "/etc/nginx/certs"
        - name: logs
          mountPath: "/logs"
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: openwhisk
  labels:
    name: nginx
spec:
  type: NodePort
  selector:
    name: nginx
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 443
      targetPort: 443
      name: https-api
    - port: 8443
      targetPort: 8443
      name: https-admin
---
apiVersion: batch/v1
kind: Job
metadata:
  name: install-openwhisk-catalog
  namespace: openwhisk
  labels:
    name: install-openwhisk-catalog
spec:
  completions: 1
  template:
    metadata:
      labels:
        name: install-openwhisk-catalog
    spec:
      restartPolicy: Never
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      containers:
      - name: install-openwhisk-catalog
        image: projectodd/whisk_catalog:openshift-latest
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: preload-openwhisk-runtimes
  namespace: openwhisk
  labels:
    name: preload-openwhisk-runtimes
spec:
  completions: 1
  template:
    metadata:
      labels:
        name: preload-openwhisk-runtimes
    spec:
      restartPolicy: Never
      containers:
      - name: preload-openwhisk-nodejs6
        image: projectodd/nodejs6action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-python2
        image: projectodd/python2action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-python3
        image: projectodd/python3action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-swift3
        image: projectodd/swift3action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-java8
        image: projectodd/java8action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]

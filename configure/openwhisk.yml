---
kind: Namespace
apiVersion: v1
metadata:
  name: openwhisk
  labels:
    name: openwhisk
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openwhisk-config
  namespace: openwhisk
data:
  env: |
    WHISK_API_HOST_NAME=nginx.openwhisk
    WHISK_VERSION_NAME=kube
    WHISK_LOGS_DIR=/tmp/wsklogs
    WHISK_VERSION_DATE=2017-05-25T01:36:40Z
    WHISK_VERSION_BUILDNO=latest
  
    RUNTIMES_MANIFEST='{"defaultImagePrefix": "openwhisk", "defaultImageTag": "latest", "blackboxes": [{"name": "dockerskeleton"}], "runtimes": {"python": [{"kind": "python", "image": {"name": "python2action"}}, {"default": true, "kind": "python:2", "image": {"name": "python2action"}}, {"kind": "python:3", "image": {"name": "python3action"}}], "swift": [{"deprecated": true, "kind": "swift", "image": {"name": "swiftaction"}}, {"default": true, "kind": "swift:3", "image": {"name": "swift3action"}}], "java": [{"kind": "java", "default": true, "image": {"name": "java8action"}, "attached": {"attachmentType": "application/java-archive", "attachmentName": "jarfile"}, "sentinelledLogs": false, "requireMain": true}], "nodejs": [{"deprecated": true, "kind": "nodejs", "image": {"name": "nodejsaction"}}, {"default": true, "kind": "nodejs:6", "image": {"name": "nodejs6action"}}]}}'
    
    DEFAULTLIMITS_ACTIONS_INVOKES_PERMINUTE=120
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENT=100
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    DEFAULTLIMITS_ACTIONS_SEQUENCE_MAXLENGTH=50
    DEFAULTLIMITS_TRIGGERS_FIRES_PERMINUTE=60

    LIMITS_ACTIONS_INVOKES_PERMINUTE=60
    LIMITS_ACTIONS_INVOKES_CONCURRENT=30
    LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    LIMITS_TRIGGERS_FIRES_PERMINUTE=60

    CONTROLLER_HOST=controller.openwhisk
    CONTROLLER_HOST_PORT=10001
    
    CONSULSERVER_HOST=consul.openwhisk
    CONSUL_HOST=consul.openwhisk
    CONSUL_HOST_PORT4=8500
    
    KAFKA_HOST=kafka.openwhisk
    KAFKA_HOST_PORT=9092
    KAFKA_NUMPARTITIONS=2

    ZOOKEEPER_HOST=zookeeper.openwhisk
    ZOOKEEPER_HOST_PORT=2181

    INVOKER_CONTAINER_NETWORK=bridge
    INVOKER_USEREACTIVEPOOL=true
    
    NGINX_HOST=nginx.openwhisk
    NGINX_CONF_DIR=/tmp/nginx

    DB_HOST=couchdb.openwhisk
    DB_PROVIDER=CouchDB
    DB_PORT=5984
    DB_PROTOCOL=http
    DB_USERNAME=couch_user
    DB_PASSWORD=couch_password
    DB_AUTH="subjects"
    DB_PREFIX="openwhisk_kube_"
    DB_SPLIT_ACTIONS_AND_ACTIVATIONS=true
    DB_WHISK_ACTIONS=openwhisk_kube_whisks
    DB_WHISK_ACTIVATIONS=openwhisk_kube_activations
    DB_WHISK_AUTHS=openwhisk_kube_subjects

    APIGW_AUTH_USER=""
    APIGW_AUTH_PWD=""
    APIGW_HOST="nginx.openwhisk"
    APIGW_HOST_V2="nginx.openwhisk"

    DOCKER_DNS=""
    DOCKER_REGISTRY=""
    DOCKER_IMAGE_PREFIX="openwhisk"

    LOADBALANCER_ACTIVATIONCOUNTBEFORENEXTINVOKER=10

    AUTH_WHISK_SYSTEM=789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP
    AUTH_GUEST=23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP

    CATALOG_NAMESPACE="/whisk.system"
    CATALOG_AUTH_KEY="/openwhisk/ansible/files/auth.whisk.system"
    CATALOG_REPOS='{"openwhisk-catalog": {"url": "https://github.com/apache/incubator-openwhisk-catalog.git", "location": "/openwhisk-catalog", "version": "HEAD", "repo_update": "NO"}}'
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchdb
  namespace: openwhisk
  labels:
    name: couchdb
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: couchdb
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      containers:
      - name: couchdb
        imagePullPolicy: IfNotPresent
        image: projectodd/whisk_couchdb
        ports:
        - name: couchdb
          containerPort: 5984
        volumeMounts:
          - name: openwhisk-config
            mountPath: "/openwhisk_config"
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: openwhisk
  labels:
    name: couchdb
spec:
  selector:
    name: couchdb
  ports:
    - port: 5984
      targetPort: 5984
      name: couchdb
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: zookeeper
  namespace: openwhisk
  labels:
    name: zookeeper
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: zookeeper
    spec:
      restartPolicy: Always
      containers:
      - name: zookeeper
        image: zookeeper:3.4
        imagePullPolicy: IfNotPresent
        ports:
        - name: zookeeper
          containerPort: 2181
        - name: server
          containerPort: 2888
        - name: leader-election
          containerPort: 3888
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: openwhisk
  labels:
    name: zookeeper
spec:
  selector:
    name: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
      name: zookeeper
    - port: 2888
      targetPort: 2888
      name: server
    - port: 3888
      targetPort: 3888
      name: leader-election
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka
  namespace: openwhisk
  labels:
    name: kafka
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kafka
    spec:
      restartPolicy: Always
      containers:
      - name: kafka
        image: ches/kafka:0.10.0.1
        imagePullPolicy: IfNotPresent
        env:
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: kafka.openwhisk
        - name: "KAFKA_PORT"
          value: "9092"
        ports:
        - name: kafka
          containerPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: openwhisk
  labels:
    name: kafka
spec:
  selector:
    name: kafka
  ports:
    - port: 9092
      targetPort: 9092
      name: kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: controller
  namespace: openwhisk
data:
  controller.opts: ""
  java.opts: -Xmx2g
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: controller
  namespace: openwhisk
  labels:
    name: controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: controller
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: controller-config
        configMap:
          name: controller
      containers:
      - name: controller
        imagePullPolicy: IfNotPresent
        image: projectodd/whisk_controller
        ports:
        - name: controller
          containerPort: 8080
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: controller-config
          mountPath: "/controller_config"
        env:
        - name: "COMPONENT_NAME"
          value: "controller"
        - name: "SERVICE_CHECK_HTTP"
          value: "/ping"
        - name: "SERVICE_CHECK_TIMEOUT"
          value: "2s"
        - name: "SERVICE_CHECK_INTERVAL"
          value: "15s"
        - name: "PORT"
          value: "8080"
        - name: "JAVA_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller
              key: java.opts
        - name: "CONTROLLER_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller
              key: controller.opts
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: openwhisk
  labels:
    name: controller
spec:
  selector:
    name: controller
  type: NodePort
  ports:
    - port: 10001
      targetPort: 8080
      name: controller
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invoker
  namespace: openwhisk
data:
  init: |
    source /openwhisk_config/env
    echo "Waiting for controller to be available"
    until $(curl --output /dev/null --silent --head --fail http://${CONTROLLER_HOST}:${CONTROLLER_SERVICE_PORT}/ping); do printf '.'; sleep 1; done
    export COMPONENT_NAME=$(hostname | cut -d'-' -f2)
    /invoker/bin/invoker `hostname | cut -d'-' -f2`
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: invoker
  namespace: openwhisk
  labels:
    name: invoker
spec:
  replicas: 1
  serviceName: "invoker"
  template:
    metadata:
      labels:
        name: invoker
    spec:
      restartPolicy: Always
      volumes:
      - name: cgroup
        hostPath:
          path: "/sys/fs/cgroup"
      - name: runc
        hostPath:
          path: "/run/runc"
      - name: dockerrootdir
        hostPath:
          path: "/var/lib/docker/containers"
      - name: dockersock
        hostPath:
          path: "/var/run/docker.sock"
      - name: apparmor
        hostPath:
          path: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: invoker-config
        configMap:
          name: invoker
      containers:
      - name: invoker
        imagePullPolicy: Always
        image: openwhisk/invoker
        command: [ "/bin/bash", "-o", "allexport", "/invoker_config/init" ]
        env:
          - name: "PORT"
            value: "8080"
          - name: "SERVICE_CHECK_HTTP"
            value: "/ping"
          - name: "SERVICE_CHECK_TIMEOUT"
            value: "2s"
          - name: "SERVICE_CHECK_INTERVAL"
            value: "15s"
          - name: "DOCKER_API_VERSION"
            value: "1.23"
        ports:
        - name: invoker
          containerPort: 8080
        volumeMounts:
        - name: cgroup
          mountPath: "/sys/fs/cgroup"
        - name: runc
          mountPath: "/run/runc"
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: dockerrootdir
          mountPath: "/containers"
        - name: apparmor
          mountPath: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: invoker-config
          mountPath: "/invoker_config"
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "docker pull openwhisk/nodejs6action && docker pull openwhisk/dockerskeleton && docker pull openwhisk/python2action && docker pull openwhisk/python3action && docker pull openwhisk/swift3action && docker pull openwhisk/java8action"
---
apiVersion: v1
kind: Service
metadata:
  name: invoker
  namespace: openwhisk
  labels:
    name: invoker
spec:
  selector:
    name: invoker
  clusterIP: None
  ports:
    - port: 8080
      targetPort: 8080
      name: invoker

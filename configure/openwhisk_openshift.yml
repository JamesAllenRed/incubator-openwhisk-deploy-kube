---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openwhisk
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: openwhisk
roleRef:
  name: edit
subjects:
  - kind: ServiceAccount
    name: openwhisk
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openwhisk-config
data:
  env: |
    WHISK_API_HOST_NAME=nginx
    WHISK_VERSION_NAME=kube
    WHISK_LOGS_DIR=/tmp/wsklogs
    WHISK_VERSION_DATE=2017-05-25T01:36:40Z
    WHISK_VERSION_BUILDNO=latest
  
    RUNTIMES_MANIFEST='{"defaultImagePrefix": "openwhisk", "defaultImageTag": "latest", "blackboxes": [{"name": "dockerskeleton"}], "runtimes": {"python": [{"kind": "python", "image": {"name": "python2action"}}, {"default": true, "kind": "python:2", "image": {"name": "python2action"}}, {"kind": "python:3", "image": {"name": "python3action"}}], "swift": [{"deprecated": true, "kind": "swift", "image": {"name": "swiftaction"}}, {"default": true, "kind": "swift:3", "image": {"name": "swift3action"}}], "java": [{"kind": "java", "default": true, "image": {"name": "java8action"}, "attached": {"attachmentType": "application/java-archive", "attachmentName": "jarfile"}, "sentinelledLogs": false, "requireMain": true}], "nodejs": [{"deprecated": true, "kind": "nodejs", "image": {"name": "nodejsaction"}}, {"default": true, "kind": "nodejs:6", "image": {"name": "nodejs6action"}}]}}'
    
    DEFAULTLIMITS_ACTIONS_INVOKES_PERMINUTE=120
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENT=100
    DEFAULTLIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    DEFAULTLIMITS_ACTIONS_SEQUENCE_MAXLENGTH=50
    DEFAULTLIMITS_TRIGGERS_FIRES_PERMINUTE=60

    LIMITS_ACTIONS_INVOKES_PERMINUTE=60
    LIMITS_ACTIONS_INVOKES_CONCURRENT=30
    LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM=5000
    LIMITS_TRIGGERS_FIRES_PERMINUTE=60

    CONTROLLER_HOST=controller
    CONTROLLER_HOST_PORT=10001

    CONSULSERVER_HOST=consul
    CONSUL_HOST=consul
    CONSUL_HOST_PORT4=8500
    
    KAFKA_HOST=kafka
    KAFKA_HOST_PORT=9092
    KAFKA_NUMPARTITIONS=2

    ZOOKEEPER_HOST=zookeeper
    ZOOKEEPER_HOST_PORT=2181

    INVOKER_CONTAINER_NETWORK=bridge
    INVOKER_USEREACTIVEPOOL=true
    INVOKER_USEKUBERNETES=true
    INVOKER_NUMCORE=4
    INVOKER_CORESHARE=3
    
    NGINX_HOST=nginx
    NGINX_CONF_DIR=/tmp/nginx

    DB_HOST=couchdb
    DB_PROVIDER=CouchDB
    DB_PORT=5984
    DB_PROTOCOL=http
    DB_USERNAME=couch_user
    DB_PASSWORD=couch_password
    DB_AUTH="subjects"
    DB_PREFIX="openwhisk_kube_"
    DB_SPLIT_ACTIONS_AND_ACTIVATIONS=true
    DB_WHISK_ACTIONS=openwhisk_kube_whisks
    DB_WHISK_ACTIVATIONS=openwhisk_kube_activations
    DB_WHISK_AUTHS=openwhisk_kube_subjects

    APIGW_AUTH_USER=""
    APIGW_AUTH_PWD=""
    APIGW_HOST="nginx"
    APIGW_HOST_V2="nginx"

    DOCKER_DNS=""
    DOCKER_REGISTRY=""
    DOCKER_IMAGE_PREFIX="projectodd"
    DOCKER_IMAGE_TAG="openshift-latest"

    LOADBALANCER_ACTIVATIONCOUNTBEFORENEXTINVOKER=10

    AUTH_WHISK_SYSTEM=789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP
    AUTH_GUEST=23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP

    CATALOG_NAMESPACE="/whisk.system"
    CATALOG_AUTH_KEY="/openwhisk/ansible/files/auth.whisk.system"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchdb
  labels:
    name: couchdb
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: couchdb
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: couchdb-data
        emptyDir: {}
      containers:
      - name: couchdb
        imagePullPolicy: IfNotPresent
        image: projectodd/whisk_couchdb:openshift-latest
        ports:
        - name: couchdb
          containerPort: 5984
        volumeMounts:
          - name: openwhisk-config
            mountPath: "/openwhisk_config"
          - name: couchdb-data
            mountPath: "/usr/local/var/lib/couchdb"
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  labels:
    name: couchdb
spec:
  selector:
    name: couchdb
  ports:
    - port: 5984
      targetPort: 5984
      name: couchdb
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    name: zookeeper
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: zookeeper
    spec:
      restartPolicy: Always
      volumes:
      - name: zookeeper-data
        emptyDir: {}
      - name: zookeeper-datalog
        emptyDir: {}
      containers:
      - name: zookeeper
        image: projectodd/whisk_zookeeper:openshift-latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: zookeeper
          containerPort: 2181
        - name: server
          containerPort: 2888
        - name: leader-election
          containerPort: 3888
        volumeMounts:
          - mountPath: /data
            name: zookeeper-data
          - mountPath: /datalog
            name: zookeeper-datalog
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    name: zookeeper
spec:
  selector:
    name: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
      name: zookeeper
    - port: 2888
      targetPort: 2888
      name: server
    - port: 3888
      targetPort: 3888
      name: leader-election
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka
  labels:
    name: kafka
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kafka
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: kafka-logs
        emptyDir: {}
      - name: kafka-java-logs
        emptyDir: {}
      containers:
      - name: kafka
        image: projectodd/whisk_kafka:openshift-latest
        imagePullPolicy: IfNotPresent
        env:
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: kafka
        ports:
        - name: kafka
          containerPort: 9092
        volumeMounts:
          - name: openwhisk-config
            mountPath: "/openwhisk_config"
          - name: kafka-logs
            mountPath: "/data"
          - name: kafka-java-logs
            mountPath: "/logs"
            
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    name: kafka
spec:
  selector:
    name: kafka
  ports:
    - port: 9092
      targetPort: 9092
      name: kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: controller
data:
  controller.opts: ""
  java.opts: -Xmx2g
  init: |
    source /openwhisk_config/env
    echo "Waiting for couchdb to be available"
    until $(curl --output /dev/null --silent --head --fail http://${DB_HOST}:${DB_PORT}/_all_dbs); do printf '.'; sleep 1; done
    /controller/bin/controller
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: controller
  labels:
    name: controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: controller
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: controller-config
        configMap:
          name: controller
      containers:
      - name: controller
        imagePullPolicy: IfNotPresent
        image: projectodd/controller:openshift-latest
        command: ["/bin/bash", "-o", "allexport", "/controller_config/init"]
        ports:
        - name: controller
          containerPort: 8080
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: controller-config
          mountPath: "/controller_config"
        env:
        - name: "COMPONENT_NAME"
          value: "controller"
        - name: "SERVICE_CHECK_HTTP"
          value: "/ping"
        - name: "SERVICE_CHECK_TIMEOUT"
          value: "2s"
        - name: "SERVICE_CHECK_INTERVAL"
          value: "15s"
        - name: "PORT"
          value: "8080"
        - name: "JAVA_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller
              key: java.opts
        - name: "CONTROLLER_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller
              key: controller.opts
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  labels:
    name: controller
spec:
  selector:
    name: controller
  type: NodePort
  ports:
    - port: 10001
      targetPort: 8080
      name: controller
---
apiVersion: v1
kind: Route
metadata:
  name: controller
  labels:
    name: controller
spec:
  port:
    targetPort: controller
  to:
    kind: Service
    name: controller
    weight: 100
  wildcardPolicy: None
---
apiVersion: v1
kind: Route
metadata:
  name: controller-secured
  labels:
    name: controller
spec:
  port:
    targetPort: controller
  to:
    kind: Service
    name: controller
    weight: 100
  wildcardPolicy: None
  tls:
    termination: edge
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invoker
data:
  init: |
    source /openwhisk_config/env
    export ORDINAL=$(hostname | cut -d'-' -f2)
    echo "Waiting for controller to be available"
    until $(curl --output /dev/null --silent --head --fail http://${CONTROLLER_HOST}:${CONTROLLER_SERVICE_PORT}/ping); do printf '.'; sleep 1; done
    export COMPONENT_NAME=${ORDINAL}
    /invoker/bin/invoker ${ORDINAL}
  cleanup: |
    export ORDINAL=$(hostname | cut -d'-' -f2)
    kubectl delete pod -l invoker=invoker${ORDINAL}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: invoker
  labels:
    name: invoker
spec:
  replicas: 1
  serviceName: "invoker"
  template:
    metadata:
      labels:
        name: invoker
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: invoker-config
        configMap:
          name: invoker
      serviceAccountName: openwhisk
      containers:
      - name: invoker
        imagePullPolicy: IfNotPresent
        image: projectodd/invoker:openshift-latest
        command: [ "/bin/bash", "-o", "allexport", "/invoker_config/init" ]
        env:
          - name: "PORT"
            value: "8080"
          - name: "SERVICE_CHECK_HTTP"
            value: "/ping"
          - name: "SERVICE_CHECK_TIMEOUT"
            value: "2s"
          - name: "SERVICE_CHECK_INTERVAL"
            value: "15s"
        ports:
        - name: invoker
          containerPort: 8080
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: invoker-config
          mountPath: "/invoker_config"
        lifecycle:
          preStop:
            exec:
              command: [ "/bin/bash", "/invoker_config/cleanup" ]
---
apiVersion: v1
kind: Service
metadata:
  name: invoker
  labels:
    name: invoker
spec:
  selector:
    name: invoker
  clusterIP: None
  ports:
    - port: 8080
      targetPort: 8080
      name: invoker
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alarmprovider
data:
  init: |
    source /openwhisk_config/env
    echo "Waiting for couchdb to be available"
    until $(curl --output /dev/null --silent --head --fail http://${DB_HOST}:${DB_PORT}/_all_dbs); do printf '.'; sleep 1; done
    export DB_HOST=${DB_HOST}:${DB_PORT}
    export DB_PREFIX=whisk_alarms_
    export TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
    export NAMESPACE=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    export ROUTER_HOST=$(curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer ${TOKEN}" "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/oapi/v1/namespaces/${NAMESPACE}/routes/controller-secured?pretty=true" | grep '"host":' | head -n 1 | awk -F '"' '{print $4}')
    export PORT=8080
    node /alarmsTrigger/app.js
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: alarmprovider
  labels:
    name: alarmprovider
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: alarmprovider
    spec:
      restartPolicy: Always
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      - name: alarmprovider-config
        configMap:
          name: alarmprovider
      serviceAccountName: openwhisk
      containers:
      - name: alarmprovider
        image: openwhisk/alarmprovider:1.1.7
        imagePullPolicy: IfNotPresent
        command: [ "/bin/bash", "-o", "allexport", "/alarmprovider_config/init" ]
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
        - name: alarmprovider-config
          mountPath: "/alarmprovider_config"
---
apiVersion: v1
kind: Service
metadata:
  name: alarmprovider
  labels:
    name: alarmprovider
spec:
  selector:
    name: alarmprovider
  ports:
    - port: 8080
      targetPort: 8080
      name: alarmprovider
---
apiVersion: batch/v1
kind: Job
metadata:
  name: install-openwhisk-catalog
  labels:
    name: install-openwhisk-catalog
spec:
  completions: 1
  serviceAccountName: openwhisk
  template:
    metadata:
      labels:
        name: install-openwhisk-catalog
    spec:
      restartPolicy: Never
      volumes:
      - name: openwhisk-config
        configMap:
          name: openwhisk-config
      serviceAccountName: openwhisk
      containers:
      - name: install-openwhisk-catalog
        image: projectodd/whisk_catalog:openshift-latest
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: openwhisk-config
          mountPath: "/openwhisk_config"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: preload-openwhisk-runtimes
  labels:
    name: preload-openwhisk-runtimes
spec:
  completions: 1
  serviceAccountName: openwhisk
  template:
    metadata:
      labels:
        name: preload-openwhisk-runtimes
    spec:
      restartPolicy: Never
      containers:
      - name: preload-openwhisk-nodejs6
        image: projectodd/nodejs6action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-python2
        image: projectodd/python2action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-python3
        image: projectodd/python3action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-swift3
        image: projectodd/swift3action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
      - name: preload-openwhisk-java8
        image: projectodd/java8action:openshift-latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c", "echo", "success"]
